import { naturalCompare, validateUploadPayload } from '../utils';
import { StorageProvider } from '@bitsongjs/storage';
import { NFTUploadResponse, DataUploadType } from '../types';

export class NFTUploader {
	constructor(private provider: StorageProvider) {}

	/**
	 * Returns the CID
	 * @param assets - File assets array to upload on ipfs (It's related to Web File api)
	 * @param rawMetadata - File of metadata related to assets array to upload on ipfs (It's related to Web File api)
	 * @returns Returns the CID generated by the provider
	 */
	async upload(assets: File[], rawMetadata: File[]): Promise<NFTUploadResponse> {
		const sortedAssets = assets.sort((a, b) => naturalCompare(a.name, b.name));
		const sortedMetadata = rawMetadata.sort((a, b) =>
			naturalCompare(a.name, b.name),
		);

		const assetsWithPrefix: File[] = [];

		for (const asset of sortedAssets) {
			const file = new File([asset], `/${DataUploadType.ASSETS}/${asset.name}`, {
				type: asset.type,
			});

			assetsWithPrefix.push(file);
		}

		const metadataWithPrefix: File[] = [];

		for (const meta of sortedMetadata) {
			const file = new File([meta], `/${DataUploadType.METADATA}/${meta.name}`, {
				type: meta.type,
			});

			metadataWithPrefix.push(file);
		}

		validateUploadPayload(assetsWithPrefix, metadataWithPrefix);

		const imagesCID = await this.provider.uploadAll(assetsWithPrefix);

		const metadata: File[] = [];

		for (const [index, data] of metadataWithPrefix.entries()) {
			const txtData = await data.text();
			const jsonData = JSON.parse(txtData);
			const asset = assetsWithPrefix[index];

			if (asset.type.includes('image')) {
				jsonData.image = `ipfs://${imagesCID}${asset.name}`;
			}

			if (asset.type.includes('video') || asset.type.includes('audio')) {
				jsonData.animation_url = `ipfs://${imagesCID}${asset.name}`;
			}

			const file = new File([JSON.stringify(jsonData)], data.name, {
				type: 'application/json',
			});

			metadata.push(file);
		}

		const metadataCID = await this.provider.uploadAll(metadata);

		const uri = `ipfs://${metadataCID}`;

		return {
			uri,
		};
	}
}
